@use '@utils/variables' as vars;

// Others
@mixin card-counter {
	@include flex-center;
	content: counter(card);
	position: absolute;
	right: clamp(5px, 1vw, 18px);
	top: clamp(5px, 1vw, 18px);
	font-weight: 700;
	font-size: clamp(14px, 1vw, 18px);
	width: clamp(30px, 1.9vw, 36px);
	height: clamp(30px, 1.9vw, 36px);
	aspect-ratio: 1;
	z-index: 1;
	border-radius: 50%;
	background: #ffffff1f;
	backdrop-filter: blur(144px);
}
@mixin card-blur-bottom($blur: 50px) {
	bottom: 0;
	width: 120%;
	left: 50%;
	height: 50%;
	filter: blur($blur);
	transform: translate(-50%, 20%);
}
@mixin card-blur-init() {
	content: '';
	position: absolute;
	z-index: 1;
	transition: opacity vars.$dt;
}
@mixin card-blur($blur-start: 50px, $blur-end: 80px) {
	@include card-blur-init;
	@media screen and (min-width: vars.$bp-small-mobile) {
		filter: blur($blur-start);
		width: 170%;
		height: 122%;
		top: 58%;
		right: 3.9%;
		transform: rotate(-5deg);
	}
	@media screen and (max-width: vars.$bp-small-mobile) {
		@include card-blur-bottom($blur-end);
	}
}
@mixin section-elevation {
	border-radius: clamp(20px, 2.4vw, 44px);
	background-color: vars.$dark-blue-alt;
}
@mixin title-62 {
	font-weight: 500;
	font-size: clamp(30px, 3.3vw, 62px);
	line-height: 100%;
}
// 1. Define the mixin without any @function
@mixin moving-button($axis: y, $distance: 200%) {
	display: grid;
	place-items: center;
	overflow: hidden;

	// stack both children in the same grid cell
	& > * {
		grid-area: 1/1/2/2;
		transition-property: transform, translate, opacity;
		transition-timing-function: cubic-bezier(0.18, 0.71, 0.11, 1);
		transition-duration: 0.8s;
	}

	// initial off-screen state for the “second” element
	& > *:last-of-type {
		@if $axis == x {
			translate: $distance 0;
			transform: scaleX(2);
		} @else {
			translate: 0 $distance;
			transform: scaleY(2);
		}
		opacity: 0;
	}

	// hover toggles the two children
	&:not(:disabled):hover {
		transform: scale(1.1);

		// bring second element in
		& > *:last-of-type {
			translate: 0 0;
			opacity: 1;
			transform: none;
		}

		// push first element out
		& > *:first-of-type {
			@if $axis == x {
				translate: -#{$distance} 0;
				transform: scaleX(2);
			} @else {
				translate: 0 -#{$distance};
				transform: scaleY(2);
			}
			opacity: 0;
		}
	}
}

// Layout related
@mixin grid-center {
	display: grid;
	place-items: center;
}
@mixin flex-center {
	display: flex;
	justify-content: center;
	align-items: center;
}
@mixin grid-scroll($grid-width, $snap-align: start) {
	grid-template-columns: initial;
	grid-auto-flow: column;
	grid-auto-columns: $grid-width;
	overflow-x: auto;
	scroll-snap-type: x mandatory;
	&::-webkit-scrollbar {
		display: none;
	}
	& > * {
		scroll-snap-align: $snap-align;
	}
}
@mixin flex-scroll($snap-align: start) {
	overflow-x: auto;
	scroll-snap-type: x mandatory;
	&::-webkit-scrollbar {
		display: none;
	}
	& > * {
		scroll-snap-align: $snap-align;
	}
}
@mixin flex-between {
	display: flex;
	align-items: center;
	justify-content: space-between;
}
